<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIEAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAlMVPETpuV5Fu8quU5ZXTmPW556Fu9q+pOnJXoMU9m6VSqnuVau6naWrqo2Fq6qNlauqjZWrqo2Vq6
        qNlauqjYW7yp2kB2fuEiKE7oJC9S6SQvUukkL1LpJC5S6SQuUukkLlLpJC5S6SQuUukkLlLpJC5S6SQv
        UukjK1DqICRLyCMtUOlNl5L/XL6q/0uSj/8rQl3/TpuV/1eyo/8xUWf/P3R8/1u9qv9auqj/Wrqo/1u8
        qf9auqj/Wrqo/1q6qP9bvKn/PnF7/TZbb/9RoZ3/UJ+c/1CenP9PnZv/T5yb/0+cm/9PnJv/T5yb/0+d
        m/9Qn5z/TpmY/zFPZ/8fIkq3Iy1Q6E2Xkv5YtKT/WLSk/z9zfP9Fg4b/XL+r/1Chmf9Ghoj/T56X/1q6
        qP9Zt6b/TZmT/1eyo/9au6j/Wrqo/1u9qv9CfIL9MlJp/1WqpP9aua3/XsK0/17Cs/9ewrP/XsKz/17C
        s/9ewrT/XL6x/06amf84YnT/IyxQ0R8iSTYjLVDoTZmT/kF6gP88bXj/Wbem/1Opnf9IjIv/Wrmn/02Z
        k/8sRF//UaKZ/1i2pf8yU2j/QHd//1u9qv9MlZH/RoeI/1Spnv40V2v9Kj5c/jhhc/9bvK//XcGz/17C
        s/9ewbP/XcCy/17Cs/9MlpX/JC9S8R8hSZYfIUkqHyFJACMtUOhNmZP+TpuV/yo+W/9Lk5D/VKme/yxE
        X/9HiYr/Wbin/zlkc/84YXH/Wrqo/0mOjf8rQFz/UaOa/0yWkf8rQFz/TpyV/1m2pv5KkY/9Kj9b/kSB
        hv9Wr6T/S5KT/0+cmP9Zt6n/UqSc/zFRZ/8fIkmSHyFJAiAkSwAgJEoAIy1Q6E2Xkv5bvKn/R4iJ/0uU
        kf9cvqv/RYOG/ztqd/9bvKn/VKue/0iLi/9auaj/Wbmn/0N/hP9Ro5n/W7yp/z9zfP9EgYX/XL6r/1q7
        qf9HiIn9LUZg/S1FX/4qPlv+K0Fd/i9LY/0oOFfyICRLpCAjShsgJEsAICRLACAkSgAkLlHoTZmT/lu8
        qf9bvKn/VKme/0qPjv9Zt6b/VKue/0qRj/5YtaX/W72q/06blf9Sppv+W72q/1Gimf9OmpT9Wrmn/1Ws
        oP9Kko//Wbam/1q7qf9UrJ/+TpuV/VOnnP5PnZb4NFdrgRsXQzgfI0oKICNLACAkSwAgJEsAAAAAACQu
        UedNmZT7W7yp/Fu8qftOm5X7Kj1b/EaGiJ1QoZl6JjNU3USBhO9bvqrROWRz3TFQZupYtqWiPnN8tSk6
        We1OmpSRTpyVgic1VuFGiIn/W7up/Fq7qftbvKn7Wrup/Fu8qfFexa89P3N8ACAkSwAgJEsAICRLAAAA
        AAAAAAAAIy1QX0uVkVdbvKlSWruoUFi0pE8nNlaZHiBIXTdfcAAfI0pkIyxQtkmOjRwrQV00HyJKsB8h
        SSMoOFcMHyNKpx4eR2E0V2sAICRLYyo/XMpVrJ9cWrupT1q6qFBauqhQWrqoSlq6qBBauqgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAlMFIARoOHAD90fQA9d30AOW94ACcpUAYlMVMHa3OTABUYQAUgI0sjSf+9ABwz
        UAAjJ04QOjxjAhYcQwAiJk0VIiZNFRUZQQAwPl4FISRMHEmckwA9eH0APXJ7AEqOjQBauqgAWrqoAFq6
        qAAAAAAAAAAAAAAAAAAAAAAAAAAAACImTQAnLFIRHyNKWR8jSoUgJEuKICRLiiYqUXp5gqArLTFXaCAk
        S4kgJEuKICRLiiAkS4kgJEuKICRLiiAkS4kgJEuJICRLiiAkS4ogJEuIICRLiiAkS4keIklnIydOHxkc
        RAA2O2AAMTZbAAAAAAAAAAAAAAAAAAAAAAAAAAAAJitRGyMnTqxDSW38anOS/3J6mf9xeZj/foel/7bC
        2+OJk6/5cXmY/3J6mf9yepn/cnqZ/3J6mf9yepn/cnqZ/3J6mf9yepn/cnqZ/3J6mf9yepn/b3eW/1FY
        ev8pLlTRIiZMQhcaQgB9hqQATVN2AAAAAAAAAAAAAAAAAAAAAAAgJEuSUFZ5/7G91v/D0Of/w9Dn/8PQ
        5//D0Of/wc/l/8PQ5//D0Of/w9Dn/8PQ5//D0Of/w9Dn/8PQ5//D0Of/w9Dn/8PQ5//D0Of/w9Dn/8PQ
        5//D0Of/vMng/32GpP8rL1XSIiZNICYqUABFS28AAAAAAAAAAAAAAAAAAAAAACYqUeSNl7T/xNHo/8HO
        5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO
        5f/BzuX/wc7l/8HO5f/Cz+b/vsvi/1Zdf/8eIklpHiJJAEhOcgAAAAAAAAAAAAAAAAAAAAAAKCxS6pWf
        uv/E0ej/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO
        5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/E0ef/cnuZ/x4iSY0WGUEAOT5jAAAAAAAAAAAAAAAAAAAA
        AAAgJEuuZm6O/8DN5P/D0Of/w9Dn/8PR5//Cz+b/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO
        5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f9haIn/HiJJehseRgA/RWkAAAAAAAAA
        AAAAAAAAAAAAACInTTcqL1XZb3eW/6ayy/+nssz/ipSw/7G91v/Cz+b/wc7l/8HO5f/BzuX/wc7l/8HO
        5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/D0Of/xNHn/8PR5//E0ej/maS//zM4Xe4hJUw6IydOACAk
        SwAgJEsAICRLACAkSwAgJEsADRA5ACImTTojJ06wMjdc4jI3XOYlKVDzjJay/8TR6P/BzuX/wc7l/8HO
        5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/5KduP+HkK3/maS+/3mCoP87QWf/KC1Wiicp
        RwMtMVcAICRLACAkSwUgJEshICRLBCAkSwA7QWUAICRLACovVQgfI0oiHyNKJB8jSpRnb4//ws/m/8HO
        5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8HO5f/BzuX/wc7l/8LP5v+0wdn/Q0lt/zI5Z/84P23/O0N1/1Ng
        nf9ebK13AAAAASAkSwAgJEsFICRLeSAkS60gJEsOICRLADpAZAAcH0cALDBWACYqUQAkKE8AICRLOjY8
        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
        AAD//gAA//8AAP//AAD//wAA//8AAP//AAA=
</value>
  </data>
</root>